Problem Link:- https://leetcode.com/problems/combinations/submissions/

void help(int i, int n, int k, vector<int>&subSet, vector<vector<int>> &ans)
{
    // Base condation
    // 1. This condation will save us from subset having larger sizes
   
     if(k == 0)
     {
       ans.push_back(subSet);
       return ;
     }
    // 2. When remaning elements are less than the required elements
    if(k>n-i+1) return ;
    if(i>n) return ;
   
    // Take the ith element 
    subSet.push_back(i);
    help(i+1,n,k-1,subSet,ans); // One element is already taken that why i am passing k-1 elements here. 
    
    // Skip the ith element
    subSet.pop_back();
    help(i+1,n,k,subSet,ans);
    
}
vector<vector<int>> combinations(int n, int k)
{
    vector<int> subSet;
    vector<vector<int>> ans;
    help(1,n,k,subSet,ans);
    return ans;
}
