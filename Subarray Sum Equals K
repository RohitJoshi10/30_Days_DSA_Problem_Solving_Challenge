Problem Link:- https://leetcode.com/problems/subarray-sum-equals-k/description/

class Solution {
public:
    int subarraySum(vector<int>& nums, int k) {
        int n = nums.size();
        // TC:- O(N)
        int prefix[n]; // Make a prefix array to store prefix sum

        prefix[0] = nums[0]; // for element at index at zero, it is same  making our prefix array
        
        for(int i=1; i<n; i++)
        {
            prefix[i] = nums[i] + prefix[i-1];
        }

        unordered_map<int,int> mp; // declare an unordered map
        
        int count = 0; // to store the number of our subarrays having sum as 'k'
        
        for(int i = 0; i < n; i++) // traverse from the prefix array
        {
            if(prefix[i] == k) // if it already becomes equal to k, then increment ans
                count++;
            
            // now, as we discussed find whether (prefix[i] - k) present in map or not
            if(mp.find(prefix[i] - k) != mp.end())
            {
                count += mp[prefix[i] - k]; // if yes, then add it our answer
            }
            
            mp[prefix[i]]++; // put prefix sum into our map
        }
        
        return count; // and at last, return our answer
           
    }
};
