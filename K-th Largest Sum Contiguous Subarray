Problem Link:- https://practice.geeksforgeeks.org/problems/k-th-largest-sum-contiguous-subarray/1


// Approach 1: TC: O(K)
// This solution has TC:- N^2logN and SC: N^2
// class Solution{
// public:
//     int kthLargest(vector<int> &Arr,int N,int K){
//      vector<int> sumStore;
//      for(int i=0; i<N; i++)
//      {
//         int sum = 0;
//         for(int j=i; j<N; j++)
//         {
//             sum += Arr[j];
//             sumStore.push_back(sum);
//         }
//      }
    
//     sort(sumStore.begin(), sumStore.end());
    
//     return sumStore[sumStore.size()-K];
//     }
// };




// Approach 2:
class Solution{
public:
    int kthLargest(vector<int> &Arr,int N,int K){
    priority_queue<int, vector<int>, greater<int> >pq;
    
   
    for(int i=0; i<N; i++)
    {
        int sum = 0;
        for(int j=i; j<N; j++)
        {
            sum += Arr[j];
            if(pq.size() < K)
            {
                pq.push(sum);
            }
            else
            {
                if(sum > pq.top())
                {
                    pq.pop();
                    pq.push(sum);
                }
            }
        }
    }
    
    return pq.top();
    }
};
