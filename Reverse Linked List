Problem Link:- https://leetcode.com/problems/reverse-linked-list/description/

// Iterative Solution
// class Solution {
// public:
//     ListNode* reverseList(ListNode* head) {
        
//     if(head == NULL || head->next == NULL) return head;

//     ListNode* prev = NULL;
//     ListNode* curr = head;
//     ListNode* forward = NULL;

//     while(curr != NULL)
//     {
//         forward = curr->next;
//         curr->next = prev;
//         prev = curr;
//         curr = forward;
//     }

//     return prev;

//     }
// };




// Recursive Solution 1

// void reverse(ListNode* &head, ListNode* &curr, ListNode* &prev)
// {
//    // Base Case
//    if(curr == NULL)
//    {
//        head = prev;
//        return;
//    }

//    ListNode* forward = curr->next;
//    reverse(head, forward, curr);
//    curr->next = prev;
// }

// class Solution {
// public:
//     ListNode* reverseList(ListNode* head) {

//     ListNode* curr = head;
//     ListNode* prev = NULL;
//     reverse(head, curr, prev);
//     return head;
//     }
// };




// Recursive Solution 2

class Solution {
public:

    // It will return the head of the reverse list
    ListNode* reverse(ListNode* &head)
    {
       // Base Case 
       if(head == NULL || head->next == NULL)
       {
           return head;
       }

       ListNode* smallhead = reverse(head->next);

       head->next->next = head;
       head->next = NULL;

       return smallhead;

    }

    ListNode* reverseList(ListNode* head) {
    return reverse(head);
    
    }
};
