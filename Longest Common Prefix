Problem Link:- https://www.codingninjas.com/codestudio/problems/longest-common-prefix_2090383

// Approach 1 (Without Using Tries)
string longestCommonPrefix(vector<string> &arr, int n)
{
    string ans="";
    // For Traversing all characters of first string
    for(int i=0; i<arr[0].length(); i++)
    {
        char ch = arr[0][i];
        
        bool match = true;
        
        // For comparing character with rest of the strings
        for(int j=1; j<n; j++)
        {
            // Not match
            if(arr[j].size()<i || ch != arr[j][i])
            {
                match = false;
                break;
            }
        }
        if(match == false)
            break;
        else
            ans.push_back(ch);
    }
    return ans;
}



TC:- O(M*N)
SC:- O(1)....if you see ans also then O(M)


// Approach 2 (Using Tries)

class TrieNode
{
    public:
    char data;
    TrieNode* children[26];
    int childCount;
    bool isTerminal;
    
    TrieNode(char ch)
    {
        data = ch;
        for(int i=0; i<26; i++)
        {
            children[i] = NULL;
        }
        childCount = 0;
        isTerminal = false;
    }
};

class Trie
{
    public:
    TrieNode* root;
    
    Trie(char ch)
    {
        root = new TrieNode(ch);
    }
    void insertUtil(TrieNode* root, string word)
    {
        // Base Case 
        if(word.length() == 0)
        {
            root->isTerminal = true;
            return ;
        }
        
        // Assumption, word will be in caps
        int index = word[0] - 'a';
        TrieNode* child;
        
        // Present
        if(root->children[index]!=NULL)
        {
            child = root->children[index];
        }
        else
        {
            // Absent
            child = new TrieNode(word[0]);
            root->childCount++;
            root->children[index] = child;
        }
        
        // Recursion
        insertUtil(child, word.substr(1));
    }
    
    void insertWord(string word)
    {
        insertUtil(root,word);
    }
    
    void lcp(string str, string &ans)
    {
        for(int i=0; i<str.length(); i++)
        {
            char ch = str[i];
            
            if(root->childCount == 1){
                ans.push_back(ch);
            // aage badh jao
            int index = ch - 'a';
            root = root->children[index];
            }
            else
            break;
        
           if(root->isTerminal)
              break;
        }
        
    }
};
string longestCommonPrefix(vector<string> &arr, int n)
{
    Trie *t = new Trie('\0');
    
    // Insert kardo all strings into trie
    for(int i=0; i<n; i++)
    {
        t->insertWord(arr[i]);
    }
    
    string first = arr[0];
    string ans = "";
    
    t->lcp(first,ans);
    return ans;
}

TC and SC:- O(M*N)




