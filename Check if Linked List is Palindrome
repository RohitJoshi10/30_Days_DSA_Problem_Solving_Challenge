Problem Link:- https://practice.geeksforgeeks.org/problems/check-if-linked-list-is-pallindrome/1


// Approach-1 TC:- O(N) & SC:- O(N)
#include<vector>
class Solution{
  public:
    //Function to check whether the list is palindrome.
    
    bool checkPalindrome(vector<int> &v)
    {
        int n = v.size();
        int s = 0;
        int e = n-1;
        
        while(s<=e)
        {
            if(v[s] != v[e])
            {
                return 0;
            }
            s++;
            e--;
        }
        
        return 1;
    }
    
    bool isPalindrome(Node *head)
    {
        vector<int> v;
        
        Node* temp = head;
        while(temp != NULL)
        {
            v.push_back(temp->data);
            temp = temp->next;
        }
        
        return checkPalindrome(v);
    }
};











// Approach-2 TC:- O(N) and SC:- O(1)
class Solution{
  public:
    Node* getMid(Node* head)
    {
        Node* slow = head;
        Node* fast = head->next;
        
        while(fast != NULL && fast->next != NULL)
        {
            fast = fast->next->next;
            slow = slow->next;
        }
        
        return slow;
    }
    
    Node* reverse(Node* head)
    {
        Node* curr = head;
        Node* prev = NULL;
        Node* next = NULL;
        
        while(curr != NULL)
        {
            next = curr->next;
            curr->next = prev;
            prev = curr;
            curr = next;
        }
        return prev;
        
    }
    
    bool isPalindrome(Node *head)
    {
        if(head == NULL || head->next == NULL) return true;
        
        // Step-1 Find the Middle
        Node* middle = getMid(head);
        
        // Step-2 Reverse List after Middle
        Node* temp = middle->next;
        middle->next = reverse(temp);
        
        // Step-3 Compare both half
        Node* head1 = head;
        Node* head2 = middle->next;
        
        while(head2 != NULL)
        {
            if(head1->data != head2->data) return false;
            head1 = head1->next;
            head2 = head2->next;
        }
        
        // Step-4 Repeate Step-2
        temp = middle->next;
        middle->next = reverse(temp);
        
        return true;
        
    }
};
