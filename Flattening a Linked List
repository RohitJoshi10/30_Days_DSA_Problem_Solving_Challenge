problem Link:- https://practice.geeksforgeeks.org/problems/flattening-a-linked-list/1

// Approach-1
Node* merge(Node* a,Node* b)
{
    Node* res=NULL;
    if(a==NULL) return b;
    else if(b==NULL) return a;
    if(a->data<=b->data)
    {
        res= a;
        res->bottom= merge(a->bottom, b);
    }
    else 
    {
        res=b;
        res->bottom = merge(a,b->bottom);
    }
    return res;
}
Node *flatten(Node *root)
{
  if(root==NULL || root->next==NULL) return root;
  return merge(root,flatten(root->next));
}




// Approach -2
Node* mergeTwoLists(Node* a, Node* b) {
    
    Node *temp = new Node(0);
    Node *res = temp; 
    
    while(a != NULL && b != NULL) {
        if(a->data < b->data) {
            temp->bottom = a; 
            temp = temp->bottom; 
            a = a->bottom; 
        }
        else {
            temp->bottom = b;
            temp = temp->bottom; 
            b = b->bottom; 
        }
    }
    
    if(a) temp->bottom = a; 
    else temp->bottom = b; 
    
    return res -> bottom; 
    
}
Node *flatten(Node *root)
{
   
        if (root == NULL || root->next == NULL) 
            return root; 
  
        // recur for list on right 
        root->next = flatten(root->next); 
  
        // now merge 
        root = mergeTwoLists(root, root->next); 
  
        // return the root 
        // it will be in turn merged with its left 
        return root; 
}
