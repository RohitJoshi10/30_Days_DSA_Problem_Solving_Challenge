Problem Link:- https://practice.geeksforgeeks.org/problems/boundary-traversal-of-binary-tree/1

class Solution {
public:
    void traverseLeft(Node* root, vector<int> &ans)
    {
        // Base Case :- root is null or it is a leaf node
        
        if((root == NULL) || (root->left == NULL && root->right == NULL))
           return ;
           
        ans.push_back(root->data);
        if(root->left)
          traverseLeft(root->left, ans);
        else
          traverseLeft(root->right, ans);
    }
    
    void traverseLeaf(Node* root, vector<int> &ans)
    {
        // Base Case
        if(root == NULL)
          return ;
        
        if(root->left == NULL && root->right == NULL)
        {
            ans.push_back(root->data);
            return;
        }
        
        traverseLeaf(root->left,ans);
        traverseLeaf(root->right,ans);
        
    }
    
    void traverseRight(Node* root, vector<int> &ans)
    {
        // Base case
        if((root == NULL) || (root->left == NULL && root->right == NULL))
           return ;
        
        if(root->right)
          traverseRight(root->right, ans);
        else
           traverseRight(root->left, ans);
           
         // return back
         ans.push_back(root->data);
            
        
    }
    
    vector <int> boundary(Node *root)
    {
        vector<int> ans;
        if(root == NULL)
        return ans;
        
        ans.push_back(root->data);
        
        // Left part print/store
        traverseLeft(root->left,ans);
        
        // Traverse Leaf Nodes:- Leaf Nodes will be either in leftsubtree or in right subtree
        
        
        // left Subtree
        traverseLeaf(root->left, ans);
        // Right Subtree
        traverseLeaf(root->right, ans);
        
        
        // Traverse right part
        traverseRight(root->right, ans);
        
        return ans;
        
    }
};


TC:- O(N) & SC:- O(H)
