Problem Link:- https://www.codingninjas.com/codestudio/problems/sudoku-solver_699919


#include <bits/stdc++.h> 

bool isSafe(int row, int col, vector<vector<int>>& board, int val)
{
    int n = board[0].size();
    
    for(int i = 0; i < n; i++)
    {
        // Row Check
        if(board[row][i] == val)
            return false;
        // col check
        if(board[i][col] == val)
            return false;
        // 3*3 Matrix check
        if(board[3*(row/3) + i/3][3*(col/3)+i%3] == val)
            return false;      
    }
    return true;
}

bool solve(vector<vector<int>>& board)
{
    int n = board[0].size();
    
    for(int row = 0; row < n; row++)
    {
        for(int col = 0; col < n; col++)
        {
            // Cell Empty
            if(board[row][col] == 0)
            {
                for(int val = 1; val<=9; val++)
                {
                    if(isSafe(row, col, board, val))
                    {
                        board[row][col] = val;
                        
                        // Recursive call
                        // agr aage soltuion posible hai yani true hoga aur agr ni h yani else mai jayega and meko fir backtrack krna padega
                        bool aageSolutionPossilbe  = solve(board);
                        if(aageSolutionPossilbe)
                            return true;
                        else
                        {
                            // Backtrack
                            board[row][col] = 0;
                        }
                    }
                }
                return false; // Solution Possible ni h 1-9 saari values try kr li h aur kisi se bhi ans ni aya 
            }
        }
    }
    return true;
}
void solveSudoku(vector<vector<int>>& sudoku)
{
	solve(sudoku);
}



Expected Time Complexity: O(9N*N).
Expected Auxiliary Space: O(N*N).
