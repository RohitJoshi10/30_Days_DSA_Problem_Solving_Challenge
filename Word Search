Problem Link:- https://leetcode.com/problems/word-search/

class Solution {
private:
    bool dfs(vector<vector<char>> &board,vector<vector<int>> &visited,int i,int j,int n,int m,int idx,string &word){
        // base case
        if(idx == word.size()){
            return true;
        }
        
        if(i < 0 || j < 0 || j >= m || i >= n || board[i][j] != word[idx] || visited[i][j] == 1){
            return false;
        }
        
        // marking the visited
        visited[i][j] = 1;
        
        // now 
        int c1 = dfs(board,visited,i+1,j,n,m,idx+1,word); // down
        int c2 = dfs(board,visited,i-1,j,n,m,idx+1,word); // up
        int c3 = dfs(board,visited,i,j+1,n,m,idx+1,word); // right
        int c4 = dfs(board,visited,i,j-1,n,m,idx+1,word); // left
        
        if(c1 || c2 || c3 || c4){
            return true;
        }
        
        visited[i][j] = 0;
        return false;
    }
public:
    bool exist(vector<vector<char>>& board, string word) {
        int n = board.size();
        int m = board[0].size();
        
        vector<vector<int>> visited(n,vector<int>(m,0));
        // Using Dfs algorithm 
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(board[i][j] == word[0]){
                    if(dfs(board,visited,i,j,n,m,0,word)){
                        return true;
                    }
                }
            }
        }
        
        return false;
    }
};



// class Solution {
// public:
//     bool search(int  i, int j, int n, int m, vector<vector<char>> &board, string &word, int k){
    
//     if(k == word.size()) return true;
//     if(i<0 || j<0 || i==n || j==m || board[i][j] != word[k]) return false;
//     char ch =  board[i][j] = '#';
//     board[i][j] = '#'; // Alrady Discovered no need to discover it again
//     bool op1 = search(i+1,j,n,m,board,word,k+1);
//     bool op2 = search(i,j+1,n,m,board,word,k+1);
//     bool op3 = search(i-1,j,n,m,board,word,k+1);
//     bool op4 = search(i,j-1,n,m,board,word,k+1);
//     board[i][j] = ch; // undo this change
//     return op1||op2||op3||op4;
// }
//     bool exist(vector<vector<char>>& board, string word) {
        
//          int n = board.size();
//          int m = board[0].size();
        
//          for(int i=0; i<n; i++)
//          {
//           for(int j=0; j<m; j++)
//           {
//             if(board[i][j] == word[0])
//             {
//                 if(search(i,j,n,m,board,word,0)) return true;
//             }
//           }
//         }
    
//        return false;
//     }
// };
