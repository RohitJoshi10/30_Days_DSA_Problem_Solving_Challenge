Problem Link:- https://leetcode.com/problems/middle-of-the-linked-list/description/

class Solution {
public:

     // First Approach
    // int getLength(ListNode* head)
    // {
    //     int len = 0;
    //     while(head != NULL)
    //     {
    //         len++;
    //         head = head->next;
    //     }

    //     return len;
    // }
    // ListNode* middleNode(ListNode* head) {
        
    //     int len = getLength(head);

    //     int ans = (len/2);
        
    //     ListNode* temp = head;
    //     int cnt = 0;
    //     while(cnt < ans)
    //     {
    //         temp = temp->next;
    //         cnt++;
    //     }

    //     return temp;
    // }



    // Second Approach
    ListNode* middleNode(ListNode* head) {
       if(head == NULL || head->next == NULL) return head;
       
       ListNode* fast = head->next;
       ListNode* slow = head;

       while(fast != NULL)
       {
           fast = fast->next;
           if(fast != NULL)
           {
               fast = fast->next;
           }
           slow = slow->next;
       }

       return slow;

    }
};
